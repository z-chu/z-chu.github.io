<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>赵成柱的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-21T06:03:58.594Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>z-chu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Glide加载圆形image第一次只显示占位图的坑</title>
    <link href="http://yoursite.com/2017/01/21/GlideLoadedCircularImageBug/"/>
    <id>http://yoursite.com/2017/01/21/GlideLoadedCircularImageBug/</id>
    <published>2017-01-21T06:03:17.000Z</published>
    <updated>2017-01-21T06:03:58.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Glide加载圆形image第一次只显示占位图的坑"><a href="#Glide加载圆形image第一次只显示占位图的坑" class="headerlink" title="Glide加载圆形image第一次只显示占位图的坑"></a>Glide加载圆形image第一次只显示占位图的坑</h1><p>在使用<a href="https://github.com/bumptech/glide" title="https://github.com/bumptech/glide" target="_blank" rel="external">Glide</a>加载图片时，经常出现图片加载不出来，只显示占位图的情况。</p>
<p>随后我好好的分析了这个问题的触发场景：</p>
<ol>
<li>出现此问题的ImageView都是<a href="https://github.com/hdodenhof/CircleImageView" title="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a>，其他ImageView的一切正常</li>
<li>出现此问题的ImagView都设置了占位图，不设置一切正常</li>
<li>出现此问题的ImagView加载时都使用了Glide的渐显动画，不使用一切正常</li>
</ol>
<p>所以如果你刚好使用了<a href="https://github.com/hdodenhof/CircleImageView" title="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="external">CircleImageView</a>或者其他的一些自定义的圆形Imageview，而你又刚好设置了占位图的话，那么，你就会遇到这个问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：不设置占位图；"><a href="#方案一：不设置占位图；" class="headerlink" title="方案一：不设置占位图；"></a>方案一：不设置占位图；</h3><h3 id="方案二：使用Glide的Transformation-API自定义圆形Bitmap的转换。"><a href="#方案二：使用Glide的Transformation-API自定义圆形Bitmap的转换。" class="headerlink" title="方案二：使用Glide的Transformation API自定义圆形Bitmap的转换。"></a>方案二：使用Glide的Transformation API自定义圆形Bitmap的转换。</h3><h3 id="方案三：使用下面的代码加载图片："><a href="#方案三：使用下面的代码加载图片：" class="headerlink" title="方案三：使用下面的代码加载图片："></a>方案三：使用下面的代码加载图片：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext)</div><div class="line">    .load(url) </div><div class="line">    .placeholder(R.drawable.ic_default_avatar)</div><div class="line">    .into(<span class="keyword">new</span> SimpleTarget&lt;Bitmap&gt;(width, height) &#123;</div><div class="line">        <span class="meta">@Override</span> </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Bitmap bitmap, GlideAnimation anim)</span> </span>&#123;</div><div class="line">            circleImageView.setImageDrawable(resource); </div><div class="line">        &#125; </div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="方案四：不使用Glide的默认动画："><a href="#方案四：不使用Glide的默认动画：" class="headerlink" title="方案四：不使用Glide的默认动画："></a>方案四：不使用Glide的默认动画：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Glide.with(mContext)</div><div class="line">    .load(url) </div><div class="line">	.dontAnimate()</div><div class="line">    .placeholder(R.drawable.ic_default_avatar)</div><div class="line">    .into(circleImageview);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Glide加载圆形image第一次只显示占位图的坑&quot;&gt;&lt;a href=&quot;#Glide加载圆形image第一次只显示占位图的坑&quot; class=&quot;headerlink&quot; title=&quot;Glide加载圆形image第一次只显示占位图的坑&quot;&gt;&lt;/a&gt;Glide加载圆形im
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>如何遍写测试用例</title>
    <link href="http://yoursite.com/2017/01/20/article-title/"/>
    <id>http://yoursite.com/2017/01/20/article-title/</id>
    <published>2017-01-20T15:55:29.000Z</published>
    <updated>2017-01-20T16:06:21.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何遍写测试用例"><a href="#如何遍写测试用例" class="headerlink" title="如何遍写测试用例"></a>如何遍写测试用例</h1><p>测试代码主要分为java单元测试用例和Android测试用例。</p>
<ul>
<li>java单元测试用例 ： 主要是业务逻辑和数据相关，独立于Android 不需要跑在 Android 设备上</li>
<li>Android 测试用例 ： 主要是UI相关，这类 case 必须要运行在 android 设备上</li>
</ul>
<h2 id="哪些东西需要测试呢？"><a href="#哪些东西需要测试呢？" class="headerlink" title="哪些东西需要测试呢？"></a>哪些东西需要测试呢？</h2><ul>
<li><p>所有的Model、Presenter/ViewModel、Api、Utils等类的public方法</p>
</li>
<li><p>Data类除了getter、setter、toString、hashCode等一般自动生成的方法之外的逻辑部分</p>
</li>
<li><p>自定义View的功能：比如set data以后，text有没有显示出来等等，简单的交互，比如click事件，负责的交互一般不测，比如touch、滑动事件等等。</p>
</li>
<li><p>Activity的主要功能：比如view是不是存在、显示数据、错误信息、简单的点击事件等。比较复杂的用户交互比如onTouch，以及view的样式、位置等等可以不测。因为不好测。</p>
</li>
</ul>
<hr>
<p>在Android Studio中进行单元测试并不需要什么插件或者过多的配置，Android Studio本身就集成了测试环境，无论是单纯的java代码单元测试还是依赖Android SDK的Android代码单元测试，都能得心应手。</p>
<p>首先在你的gradle中加入Junit的依赖，注意这里的依赖方式是测试期间的依赖（testCompile）：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>默认建立的结构如下：</p>
<p><img src="http://7xq7yd.com1.z0.glb.clouddn.com/s0.png" alt="默认结构"> </p>
<h2 id="编写Java测试用例"><a href="#编写Java测试用例" class="headerlink" title="编写Java测试用例"></a>编写Java测试用例</h2><p>如果所写的测试代码没有使用android sdk（android.<em>*</em>下的代码），那么可以在test目录下新建，本例中即为ExampleUnitTest，例子中测试了一个RxJava的Observable的发射后被消费的结果。</p>
<p>注意测试用例即一个public void的方法，并且加上@Test注解，这是Junit的标准用法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.earlydata.waterdrop;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"><span class="keyword">import</span> rx.Observer;</div><div class="line"><span class="keyword">import</span> rx.subjects.PublishSubject;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleUnitTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPublishSubject</span><span class="params">()</span> </span>&#123;</div><div class="line">        PublishSubject&lt;String&gt; stringPublishSubject = PublishSubject.create();</div><div class="line">        stringPublishSubject.subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Observable completed"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"Observer consumed "</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        stringPublishSubject.onNext(<span class="string">"hello world"</span>);</div><div class="line">        stringPublishSubject.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候打开Android Studio左边的Structure的面板，可以看到测试用例方法testPublishSubject</p>
<p><img src="http://7xq7yd.com1.z0.glb.clouddn.com/s1.jpg" alt="测试用例方法testPublishSubject"> </p>
<p>右击并运行它，测试通过，返回了正确的值</p>
<p><img src="http://7xq7yd.com1.z0.glb.clouddn.com/s3.jpg" alt="正确的值"> </p>
<p>注意本测试用例试用了System.out.println所以测试结果直接打印在了控制台上，如果把打印的地方换成Log.d()呢，你会发现报错：</p>
<p><img src="http://7xq7yd.com1.z0.glb.clouddn.com/s4.jpg" alt="报错"> </p>
<p>这个实际是因为你在java的Unit test中引用了Android的代码，即android.util.log.Log。所以对于测试Android代码，需要在androidTest中</p>
<h2 id="编写Android测试用例"><a href="#编写Android测试用例" class="headerlink" title="编写Android测试用例"></a>编写Android测试用例</h2><p>Android 测试用例主要是对Espresso API的使用，以下系列文章是对Espresso官方文档的翻译(偷个懒)</p>
<p><a href="http://www.jianshu.com/p/ef4ad5424784" title="http://www.jianshu.com/p/ef4ad542478" target="_blank" rel="external">1. Espresso 概览</a></p>
<p><a href="http://www.jianshu.com/p/92c7f6dbf80d" title="http://www.jianshu.com/p/92c7f6dbf80d" target="_blank" rel="external">2. Espresso 设置说明</a></p>
<p><a href="http://www.jianshu.com/p/9e8e8e5f09d6" title="http://www.jianshu.com/p/9e8e8e5f09d6" target="_blank" rel="external">3. Espresso 基础</a></p>
<p><a href="http://www.jianshu.com/p/cf1079954da5" title="http://www.jianshu.com/p/cf1079954da5" target="_blank" rel="external">4. Espresso 备忘录</a></p>
<p><a href="http://www.jianshu.com/p/5de7c560fe33" title="http://www.jianshu.com/p/5de7c560fe33" target="_blank" rel="external">5. Espresso 意图</a></p>
<p><a href="http://www.jianshu.com/p/4166b92fee1c" title="http://www.jianshu.com/p/4166b92fee1c" target="_blank" rel="external">6. Espresso 高级示例</a></p>
<p><a href="http://www.jianshu.com/p/e2d37d04e95e" title="http://www.jianshu.com/p/e2d37d04e95e" target="_blank" rel="external">7. Espresso Web</a></p>
<p><a href="http://www.jianshu.com/p/9ee72ec7f782" title="http://www.jianshu.com/p/9ee72ec7f782" target="_blank" rel="external">8. AndroidJUnitRunner</a></p>
<p><a href="http://www.jianshu.com/p/6a32d44eb5ad" title="http://www.jianshu.com/p/6a32d44eb5ad" target="_blank" rel="external">9. ATSL 中的 JUnit4 规则</a></p>
<p><a href="http://www.jianshu.com/p/093645e32011" title="http://www.jianshu.com/p/093645e32011" target="_blank" rel="external">10. UI Automator</a></p>
<p><a href="http://www.jianshu.com/p/29671943b69c" title="http://www.jianshu.com/p/29671943b69c" target="_blank" rel="external">11. 可访问性检查</a></p>
<p>其他资料</p>
<p><a href="http://chriszou.com/2016/06/07/android-unit-testing-everything-you-need-to-know.html?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" title="http://chriszou.com/2016/06/07/android-unit-testing-everything-you-need-to-know.html?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">关于安卓单元测试，你需要知道的一切</a></p>
<p><a href="http://www.jianshu.com/p/4f019c1c04a2" title="http://www.jianshu.com/p/4f019c1c04a2" target="_blank" rel="external">使用 Espresso 进行 Android UI 测试</a></p>
<p><a href="http://www.jianshu.com/p/37a3f68934cd" title="http://www.jianshu.com/p/37a3f68934cd" target="_blank" rel="external">Android UI 测试框架 Espresso</a></p>
<p><a href="http://www.jianshu.com/p/c265a781c8ce" title="http://www.jianshu.com/p/c265a781c8ce" target="_blank" rel="external">Android 测试代码编写小技巧 - UI 和 单元测试间共享代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何遍写测试用例&quot;&gt;&lt;a href=&quot;#如何遍写测试用例&quot; class=&quot;headerlink&quot; title=&quot;如何遍写测试用例&quot;&gt;&lt;/a&gt;如何遍写测试用例&lt;/h1&gt;&lt;p&gt;测试代码主要分为java单元测试用例和Android测试用例。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;j
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Github搭建自己的博客</title>
    <link href="http://yoursite.com/2017/01/20/hello-world/"/>
    <id>http://yoursite.com/2017/01/20/hello-world/</id>
    <published>2017-01-20T13:25:12.642Z</published>
    <updated>2017-01-20T16:00:51.371Z</updated>
    
    <content type="html"><![CDATA[<p>　本人一直都泡在CSDN，简书，知乎等论坛，爱关注大牛博客。</p>
<p>　看了<a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" title="手把手教你用Hexo+Github 搭建属于自己的博客 " target="_blank" rel="external">《手把手教你用Hexo+Github 搭建属于自己的博客》</a>之后决定搭建自己的博客，开始养成写博客的习惯。</p>
<p>　写文章会锻炼许多对于编程十分有益的技能。即使没人读我的文章，写作的过程也是有益无害。它能帮助我理清思路，明确对于某个问题的看法，加强或削弱我的某种观点。把凌乱的想法汇聚成精简的文字非常有价值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　本人一直都泡在CSDN，简书，知乎等论坛，爱关注大牛博客。&lt;/p&gt;
&lt;p&gt;　看了&lt;a href=&quot;http://blog.csdn.net/gdutxiaoxu/article/details/53576018&quot; title=&quot;手把手教你用Hexo+Github 搭建属于
    
    </summary>
    
    
  </entry>
  
</feed>
